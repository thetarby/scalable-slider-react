{"version":3,"sources":["../../src/components/slider.js","../../src/index.js","App.js","index.js"],"names":["Slider","count","zoomceil","zoomfloor","margin","left","right","width","height","step","props","updateDOMSlider","console","cx","this","xScale","d3slider","handleResize","config","range","state","slider","container","select","transition","svg","d3","tickCount","options","ceil","tickRange","xAxis","d","thisOfClass","dragged","x","invert","index","rangeValues","i","midPoint","xVal","handleReset","attachImages","items","componentDidMount","window","style","append","Math","drag","track","item","floor","componentDidUpdate","render","class","id","slider_id","React","ExampleComponent","text","className","styles","App","Component","constructor","super","value","src","locations","handleClick","bind","handleChange","setState","fluid","onClick","ReactDOM","document","getElementById"],"mappings":"6nBAIaA,EAAb,Y,QACE,cAAmB,aACjB,sBACA,MAAa,CACXC,MADW,EAEXC,SAFW,EAGXC,UAAU,GAEZ,YACEC,OAAO,CAACC,KAAD,GAAWC,MAAO,IACzBC,MAFF,IAGEC,OAHF,GAIEC,KAAK,GAEFC,EANL,QAQA,oBAAuB,2BAAvB,IACA,qBAAwB,4BAAxB,IACA,UAAa,iBAAb,IACA,eAAkB,sBAAlB,IACA,cAAiB,qBAAjB,IAnBiB,E,EADrB,G,EAAA,G,6EAAA,2CAwBEC,YACEC,yBACA,IAAIC,EAAKC,KAAKC,OAAd,GACAD,KAAA,oBACAA,KAAA,4BAAkCA,KAAKJ,MAAMM,SAA7C,QA5BJ,eAgCEC,YACEL,mBACA,IAAIR,EAASU,KAAKI,OAAlB,OACIX,EADJ,EAEIC,EAASM,KAAKI,OAFlB,OAGIC,EAAQ,CAACL,KAAKM,MAAN,UAAsBN,KAAKM,MAHvC,UAIQX,EAAOK,KAAKI,OAAhB,KACAN,YAAY,UAAZA,GACAE,KAAA,OACJ,IAIIO,EAJMP,KAAKQ,UAAUC,OAAO,OAAOC,aAA7B,8BAAV,GAIaC,0CAEU,aAAerB,EAAf,UAAmCI,EAAnC,EAFvB,KAIAM,KAAA,OAAcY,8BAEH,CAAC,EAAGnB,EAAQH,EAARG,KAAsBH,EAFvBsB,eAAd,GAIA,IAAIX,EAAOD,KAAX,OAMA,GAHAA,KAAA,YAAmBY,YAASP,EAATO,GAAmBP,EAAnBO,GAA6BjB,GAA7BiB,UAA+CP,EAAlE,IAGGL,KAAKI,OAAR,UACE,KAAIS,EAAUb,KAAKI,OAAOS,WAAWR,KAASA,EAAhC,KAA2CL,KAAKJ,MAAMM,SAASY,QAAQC,KAAKf,KAAKJ,MAAMM,SAASY,QAA9G,OACIE,EAAUJ,YAASP,EAATO,GAAmBP,EAAnBO,GAAd,GACIK,EAAQ,OAAAL,EAAA,gCAAuD,SAAUM,GACzE,YAGQX,6EAAZ,GAIFN,YAEA,IAAIkB,EAAJ,KACW,OAAAP,EAAA,2BACgB,WACnBL,iBAFG,iBAGa,WAChBY,UAAoBP,IAApBO,MAIRZ,gEACgBN,UADhBM,cAEgBN,UAFhBM,IAIAA,yCACuB,YACf,OAAGW,EAAIC,QAAJD,WAAmCA,EAAIC,QAA1C,SACE,SAEF,aALRZ,UAOa,YAAY,OAAON,KAAU,OAI1CM,gDACoBN,UADpBM,cAEoBN,UAFpBM,IAOAA,kDAEcN,UAFdM,cAGcN,UAHdM,KAvGJ,UA4GEa,YACE,MAAIC,EAAIrB,KAAKC,OAAOqB,OAApB,GAAmCC,EAAnC,KACIC,EAAYxB,KAAhB,YACA,GAAGA,KAAH,KAAc,CAEV,IAAK,IAAIyB,EAAT,EAAgBA,EAAID,SAApB,EAA4CC,IACxC,GAAIJ,GAAKG,EAALH,IAAuBA,GAAKG,EAAYC,EAA5C,GAAoD,CAChDF,IACA,MAIJF,GADQG,KAAqBA,EAAYD,EAAlC,IAAXG,GAES1B,KAAKC,OAAOuB,EAAjBzB,IACA4B,EAAOH,EAAPG,KAEK3B,KAAKC,OAAOuB,EAAYD,EAA7BxB,IACA4B,EAAOH,EAAYD,EAAnBI,SAIC3B,KAAKC,OAAVF,GACA4B,EAAON,UAAPM,GAIJ3B,KAAA,uBAtIJ,cAwIE4B,WACE5B,KAAA,SAAc,CACZX,UAAUW,KAAKJ,MAAMM,SAASY,QADlB,MAEZ1B,SAASY,KAAKJ,MAAMM,SAASY,QAAQC,QA3I3C,eAkJEc,cACE,IAAIV,EAAJ,KACAZ,0BAA+BuB,EAA/BvB,+CAEeuB,EAFfvB,wDAKa,YAAY,OAAOY,YAAsB,OALtDZ,mBApJJ,oBA4JEwB,WAAmB,WACjBjC,sBAEAE,KAAA,UAAeY,YAAU,aAAaZ,KAAKJ,MAA3C,WAEGI,KAAKJ,MAAR,OACEoC,kCAAkC,kBAAI,gBAAoB,kBAAD,kBAAvB,OAEpC,IAAI1C,EAASU,KAAKI,OAAlB,OACIX,EAASO,KAAKQ,UAAUyB,MAAhB,kBADZ,GAEIvC,EAASM,KAAKI,OAFlB,OAGIC,EAAQ,CAACL,KAAKM,MAAN,UAAsBN,KAAKM,MAHvC,UAKIX,EAAOK,KAAKI,OAAhB,KACAN,eACAE,KAAA,OACA,IAAImB,EAAJ,KAEAnB,KAAA,OAEA,IAAIW,EAAMX,KAAKQ,UAAU0B,OAAO,OAAtB,8BAAV,GAIAlC,KAAA,OAAcY,8BAEH,CAAC,EAAGnB,EAAQH,EAARG,KAAsBH,EAFvBsB,eAAd,GAKA,IAAIX,EAAOD,KAAX,OA0CAW,OAASC,0BA/BT,YACEO,aAAuBP,IAAvBO,EACAA,aAAuBP,IAAvBO,EACAP,2CAEAA,yDA0BOA,WAtBT,YACEA,2CAEaO,EAFbP,qBAGaA,YAAO,CAACO,EAAD,WAAyBP,IAH7CA,mBAIkBuB,SAASvB,MAAWO,EAJtCP,0BAKiBA,MAAWO,EAL5BP,2DAqBOA,UAZT,YACEA,2CACAO,cAAwBP,IAAxBO,EACGA,cAAwBA,EAAxBA,WAAH,KACAA,WAAqB,CACnB/B,SAAS+C,UAAUhB,gBAA0BA,cAAwB7B,EADlD,OAEnBD,UAAU8C,WAAWhB,gBAA0BA,aAAuB7B,EAA5D6C,SAGZrC,YAAYqB,QAAZrB,UAAyCqB,QAAzCrB,eASF,IAAIS,EAASI,iDAEU,aAAerB,EAAf,UAAmCI,EAAnC,EAFvB,KAKAa,iBAAqB,WAAK,mBAE1BN,YAEA,IAAImC,EAAO,OAAAxB,EAAA,2BACgB,WACnBL,iBAFG,iBAGa,WAChBY,UAAoBP,IAApBO,MAIJkB,EAAQ9B,iDACIN,UADJM,cAEIN,UAFhB,IAKAD,KAAA,qBAAyB,SAAAsC,GAAI,OAC3B,iBAD2B,MAIZ1B,YAAUL,qBAA0B8B,SAApCzB,2BAAjB,eAMA,GAHAZ,KAAA,YAAmBY,YAASP,EAATO,GAAmBP,EAAnBO,GAA6BjB,GAA7BiB,UAA+CP,EAAlE,IAGGL,KAAKI,OAAR,UACE,KAAIS,EAAUb,KAAKI,OAAnB,UACIY,EAAUJ,YAASP,EAATO,GAAmBP,EAAnBO,GAAd,GACIK,EAAQ,OAAAL,EAAA,gCAAuD,SAAUM,GACzE,YAEQX,6EAAZ,GAMFP,KAAA,OAAcO,iDAAd,GAKAP,KAAA,WAAiBO,sEAA2EF,EAA5F,IAGmBO,YAAUL,qBAA0B8B,SAApCzB,iDAAnB,GAIAZ,KAAA,SAAc,CACdZ,SAASY,KAAKJ,MAAMM,SAASY,QADf,KAEdzB,UAAUW,KAAKJ,MAAMM,SAASY,QAAQyB,SAnS1C,qBAuSEC,WACKxC,KAAKJ,MAAMQ,OAAd,MACEJ,KAAA,aAAkBA,KAAKJ,MAAMQ,OAA7B,OAEMJ,KAAKJ,MAAR,OACHI,KAAA,cAAoBA,KAAKQ,UAAUyB,MAAhB,kBAAnB,IAGFjC,KAAA,gBAAqBA,KAAKJ,MAAMM,SAAhC,QA/SJ,SAkTEuC,WACE,OACC,6BACC,yBAAKC,MAAL,WAAsBC,GAAI,YAAY3C,KAAKJ,MAAMgD,cArTvD,GAA4BC,IAA5B,WCCaC,EAAmB,SAAC,GAAa,IAAXC,EAAW,EAAXA,KACjC,OAAO,yBAAKC,UAAWC,GAAvB,I,MCSF,MAAMC,UAAYL,IAAMM,UACrBC,cACEC,QACArD,KAAKM,MAAQ,CACfC,OAAO,CACJ+C,MAAM,EACNxC,QAAQ,CACHC,KAAK,IACLwB,MAAM,IAGdT,MAAM,CACL,CACCyB,IAAI,sIACJC,UAAU,CAAC,GAAG,GAAG,GAAG,KAErB,CACCD,IAAI,sEACJC,UAAU,CAAC,EAAE,EAAE,GAAG,OAIlBxD,KAAKyD,YAAYzD,KAAKyD,YAAYC,KAAK1D,MACvCA,KAAK2D,aAAa3D,KAAK2D,aAAaD,KAAK1D,MAE7CyD,cACC,IAAInD,EAAM,eAAIN,KAAKM,OACnBA,EAAMC,OAAO+C,QACbtD,KAAK4D,SAAS,CAACtD,UAEhBqD,aAAaL,GAEZtD,KAAK4D,SAAS,CAACrD,OAAO,eAAIP,KAAKM,MAAMC,OAAhB,CAAwB+C,MAAMA,MAEpDb,SACC,OACA,oCACC,kBAAC,EAAD,CAAkBM,KAAK,8BACvB,uFACA,2CAAiB/C,KAAKM,MAAMC,OAAO+C,OAEnC,kBAAC,EAAD,CAAQV,UAAW,EAAGxC,OAAQ,CAACV,OAAO,IAAKmE,OAAK,EAAC/B,MAAO9B,KAAKM,MAAMwB,MAAO5B,SAAUF,KAAKM,MAAMC,OAAQoD,aAAc3D,KAAK2D,eAC1H,4BAAQG,QAAS9D,KAAKyD,aAAtB,aAEA,kBAAC,EAAD,CAAQb,UAAW,EAAGxC,OAAQ,CAACV,OAAO,GAAImB,UAAU,KAAMgD,OAAK,EAAC/B,MAAO9B,KAAKM,MAAMwB,MAAO5B,SAAUF,KAAKM,MAAMC,OAAQoD,aAAc3D,KAAK2D,eACzI,4BAAQG,QAAS9D,KAAKyD,aAAtB,aAGA,6HACA,kBAAC,EAAD,CAAQb,UAAW,EAAGxC,OAAQ,CAACX,MAAM,IAAIC,OAAO,GAAImB,UAAU,KAAMiB,MAAO9B,KAAKM,MAAMwB,MAAO5B,SAAUF,KAAKM,MAAMC,OAAQoD,aAAc3D,KAAK2D,eAC7I,4BAAQG,QAAS9D,KAAKyD,aAAtB,eAOYP,QClEfa,IAAStB,OAAO,kBAAC,EAAD,MAASuB,SAASC,eAAe,W","file":"static/js/main.8a1cd4ae.chunk.js","sourcesContent":["import React from 'react'\r\nimport * as d3 from \"d3\";\r\nimport './slider.css'\r\n\r\nexport class Slider extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      count: 0,\r\n      zoomceil:0,\r\n      zoomfloor:0,\r\n    };\r\n    this.config={\r\n      margin:{left: 20, right: 20},\r\n      width:1000,\r\n      height:90,\r\n      step:1,\r\n      //these values can be overriden by user props\r\n      ...props.config\r\n    }\r\n    this.componentDidMount=this.componentDidMount.bind(this);\r\n    this.componentDidUpdate=this.componentDidUpdate.bind(this);\r\n    this.dragged=this.dragged.bind(this);\r\n    this.handleResize=this.handleResize.bind(this);\r\n    this.handleReset=this.handleReset.bind(this);\r\n  }\r\n\r\n\r\n  updateDOMSlider(value){\r\n    console.log(\"updateDOM\")\r\n    var cx = this.xScale(value);\r\n    this.handle.attr('cx', cx);\r\n    this.handleText.attr(\"x\",cx).text(this.props.d3slider.value);    \r\n  }\r\n\r\n  //resizes slider to have a witdh of x pixels and scales itself.\r\n  handleResize(x){\r\n    console.log('res')\r\n    var margin = this.config.margin,\r\n        width = x,\r\n        height = this.config.height,\r\n        range = [this.state.zoomfloor,this.state.zoomceil]\r\n        var step = this.config.step; // change the step and if null, it'll switch back to a normal slider\r\n        console.log('range: '+range)\r\n        this.step=step;\r\n    var svg = this.container.select('svg').transition()\r\n        .attr('width', width)\r\n        .attr('height', height);\r\n\r\n    var slider = svg.select('g')\r\n        .transition()\r\n        .attr('transform', 'translate(' + margin.left +', '+ (height/2) + ')');\r\n    // using clamp here to avoid slider exceeding the range limits\r\n    this.xScale = d3.scaleLinear()\r\n        .domain(range)\r\n        .range([0, width - margin.left - margin.right])\r\n        .clamp(true);\r\n    var xScale=this.xScale\r\n    \r\n    // array useful for step sliders\r\n    this.rangeValues = d3.range(range[0], range[1], step || 1).concat(range[1]);\r\n    var rangeValues=this.rangeValues\r\n\r\n    if(this.config.tickCount){\r\n      var tickCount=this.config.tickCount*(range[1]-range[0])/(this.props.d3slider.options.ceil-this.props.d3slider.options.floor)\r\n      var tickRange=d3.ticks(range[0], range[1],tickCount)\r\n      var xAxis = d3.axisBottom(xScale).tickValues(tickRange).tickFormat(function (d) {\r\n          return \"\";\r\n      });\r\n\r\n      var ticks = slider.select('g').attr('class', 'ticks').attr('transform', 'translate(0, 4)')\r\n          .call(xAxis);\r\n    }\r\n\r\n    xScale.clamp(true);\r\n    // drag behavior initialization\r\n    var thisOfClass=this;\r\n    var drag = d3.drag()\r\n        .on('start.interrupt', function () {\r\n            slider.interrupt();\r\n        }).on('start drag', function () {\r\n            thisOfClass.dragged(d3.event.x);\r\n        });\r\n\r\n    // this is the main bar with a stroke (applied through CSS)\r\n    slider.select('.track').attr('class', 'track').transition()\r\n        .attr('x1', xScale.range()[0])\r\n        .attr('x2', xScale.range()[1]);\r\n\r\n    slider.selectAll(\"image\")\r\n      .style(\"visibility\", function(d){\r\n            if(d < thisOfClass.state.zoomfloor || d > thisOfClass.state.zoomceil){\r\n              return \"hidden\"\r\n            }\r\n            return \"visible\"\r\n          })\r\n      .attr('x', function(d){return xScale(d)-15/2})\r\n\r\n\r\n\r\n    slider.select('.track-inset').transition()\r\n            .attr('x1', xScale.range()[0])\r\n            .attr('x2', xScale.range()[1]);\r\n\r\n\r\n    // this is the bar on top of above tracks with stroke = transparent and on which the drag behaviour is actually called\r\n    // try removing above 2 tracks and play around with the CSS for this track overlay, you'll see the difference\r\n    slider.select('.track-overlay')\r\n      .transition()\r\n      .attr('x1', xScale.range()[0])\r\n      .attr('x2', xScale.range()[1]);\r\n  }\r\n  dragged(value) {\r\n    var x = this.xScale.invert(value), index = null, midPoint, cx, xVal;\r\n    var rangeValues=this.rangeValues\r\n    if(this.step) {\r\n        // if step has a value, compute the midpoint based on range values and reposition the slider based on the mouse position\r\n        for (var i = 0; i < rangeValues.length - 1; i++) {\r\n            if (x >= rangeValues[i] && x <= rangeValues[i + 1]) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        midPoint = (rangeValues[index] + rangeValues[index + 1]) / 2;\r\n        if (x < midPoint) {\r\n            cx = this.xScale(rangeValues[index]);\r\n            xVal = rangeValues[index];\r\n        } else {\r\n            cx = this.xScale(rangeValues[index + 1]);\r\n            xVal = rangeValues[index + 1];\r\n        }\r\n    } else {\r\n        // if step is null or 0, return the drag value as is\r\n        cx = this.xScale(x);\r\n        xVal = x.toFixed(3);\r\n    }\r\n    // use xVal as drag value\r\n\r\n    this.props.handleChange(xVal)\r\n  }\r\n  handleReset(){\r\n    this.setState({\r\n      zoomfloor:this.props.d3slider.options.floor,\r\n      zoomceil:this.props.d3slider.options.ceil\r\n    })\r\n  }\r\n\r\n  /*\r\n  gets slider object and put icons on locations\r\n  */\r\n  attachImages(slider ,items){\r\n    var thisOfClass=this\r\n    slider.selectAll(\"items\").data(items.locations).enter()\r\n      .append(\"image\")\r\n      .attr(\"href\",items.src)\r\n      .style(\"width\",\"15\")\r\n      .style(\"height\",\"20\")\r\n      .attr('x', function(d){return thisOfClass.xScale(d)-15/2})\r\n      .attr(\"y\",\"-30px\")\r\n  }\r\n  componentDidMount(){\r\n    console.log('mouont')\r\n    //select slider container\r\n    this.container=d3.select('#d3slider-'+this.props.slider_id)\r\n    //it prop fluid is set set resize event handler\r\n    if(this.props.fluid){\r\n      window.addEventListener(\"resize\", ()=>this.handleResize(+(this.container.style(\"width\")).slice(0,-2)));\r\n    }\r\n    var margin = this.config.margin,\r\n        width = (this.container.style(\"width\")).slice(0,-2),\r\n        height = this.config.height,\r\n        range = [this.state.zoomfloor,this.state.zoomceil]\r\n    \r\n    var step = this.config.step; // change the step and if null, it'll switch back to a normal slider\r\n    console.log(range)\r\n    this.step=step;\r\n    var thisOfClass=this; // in d3 'this' will be shadowed so put it to variable\r\n\r\n    this.step=step;\r\n\r\n    var svg = this.container.append('svg')\r\n        .attr('width', width)\r\n        .attr('height', height);\r\n    // using clamp here to avoid slider exceeding the range limits\r\n    this.xScale = d3.scaleLinear()\r\n        .domain(range)\r\n        .range([0, width - margin.left - margin.right])\r\n        .clamp(true);\r\n    \r\n    var xScale=this.xScale\r\n\r\n    /*\r\n      initialize drag behaviour for selecting an area by dragging\r\n\r\n\r\n    */\r\n    this.dragStartx;\r\n    this.dragFinishx;\r\n    this.dragStarty;\r\n    this.dragFinishy;\r\n    function dragstarted(d) {\r\n      thisOfClass.dragStartx=d3.event.x;\r\n      thisOfClass.dragStarty=d3.event.y;\r\n      d3.select(this)\r\n        .select(\".rect\").remove();\r\n      d3.select(this)\r\n        .append(\"rect\")\r\n        .attr(\"class\", \"rect\");\r\n    }\r\n    function dragged(d) {\r\n      d3.select(this)\r\n        .select(\".rect\")\r\n        .attr(\"x\", thisOfClass.dragStartx)\r\n        .attr(\"y\", d3.min([thisOfClass.dragStarty, d3.event.y]))\r\n        .attr(\"height\", Math.abs(d3.event.y-thisOfClass.dragStarty) )\r\n        .attr(\"width\", d3.event.x-thisOfClass.dragStartx)\r\n        .attr(\"fill\", \"black\")\r\n        .style(\"opacity\", \"0.3\")\r\n    }\r\n    function dragended(d) {\r\n      d3.select(this).select(\".rect\").remove();\r\n      thisOfClass.dragFinishx=d3.event.x;\r\n      if(thisOfClass.dragFinishx-thisOfClass.dragStartx<10) return\r\n      thisOfClass.setState({\r\n        zoomceil:Math.ceil(thisOfClass.xScale.invert(thisOfClass.dragFinishx-margin.left)),\r\n        zoomfloor:Math.floor(thisOfClass.xScale.invert(thisOfClass.dragStartx-margin.left))\r\n      })\r\n\r\n      console.log(thisOfClass.state.zoomfloor, thisOfClass.state.zoomceil)\r\n    }\r\n\r\n    svg.call(d3.drag()\r\n                 .on(\"start\", dragstarted)\r\n                 .on(\"drag\", dragged)\r\n                 .on(\"end\", dragended))\r\n\r\n    //Append svg slider to dom with d3\r\n    var slider = svg.append('g')\r\n        .attr('slider', true)\r\n        .attr('transform', 'translate(' + margin.left +', '+ (height/2) + ')');\r\n    \r\n    //scale to default on double click\r\n    slider.on('dblclick',()=>{this.handleReset()})\r\n    \r\n    xScale.clamp(true);\r\n    // drag behavior initialization\r\n    var drag = d3.drag()\r\n        .on('start.interrupt', function () {\r\n            slider.interrupt();\r\n        }).on('start drag', function () {\r\n            thisOfClass.dragged(d3.event.x);\r\n        });\r\n\r\n    // this is the main bar with a stroke (applied through CSS)\r\n    var track = slider.append('line').attr('class', 'track')\r\n        .attr('x1', xScale.range()[0])\r\n        .attr('x2', xScale.range()[1]);\r\n\r\n    //add icons \r\n    this.props.items.forEach(item=>\r\n      this.attachImages(slider, item)\r\n    ) \r\n\r\n    var trackInset = d3.select(slider.node().appendChild(track.node().cloneNode())).attr('class', 'track-inset');\r\n    \r\n    // array useful for step sliders\r\n    this.rangeValues = d3.range(range[0], range[1], step || 1).concat(range[1]);\r\n    var rangeValues=this.rangeValues\r\n    \r\n    if(this.config.tickCount){\r\n      var tickCount=this.config.tickCount\r\n      var tickRange=d3.ticks(range[0], range[1],tickCount)\r\n      var xAxis = d3.axisBottom(xScale).tickValues(tickRange).tickFormat(function (d) {\r\n          return \"\";\r\n      });\r\n      var ticks = slider.append('g').attr('class', 'ticks').attr('transform', 'translate(0, 4)')\r\n          .call(xAxis);\r\n    }\r\n\r\n    // drag handle\r\n\r\n    this.handle = slider.append('circle').classed('handle', true)\r\n        .attr('r', 8);\r\n    var handle=this.handle;\r\n\r\n\r\n    this.handleText= slider.append(\"text\").style(\"text-anchor\",\"middle\").attr(\"y\",\"-10px\").text(range[0]);\r\n    // this is the bar on top of above tracks with stroke = transparent and on which the drag behaviour is actually called\r\n    // try removing above 2 tracks and play around with the CSS for this track overlay, you'll see the difference\r\n    var trackOverlay = d3.select(slider.node().appendChild(track.node().cloneNode())).attr('class', 'track-overlay')\r\n        .call(drag);\r\n\r\n\r\n    this.setState({\r\n    zoomceil:this.props.d3slider.options.ceil,\r\n    zoomfloor:this.props.d3slider.options.floor\r\n    })\r\n\r\n  }\r\n  componentDidUpdate(){\r\n    if(this.props.config.width){\r\n      this.handleResize(this.props.config.width)\r\n    }\r\n    else if(this.props.fluid){\r\n      this.handleResize(+(this.container.style('width')).slice(0,-2))\r\n\r\n    }\r\n    this.updateDOMSlider(this.props.d3slider.value)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n     <div> \r\n      <div class='d3slider' id={'d3slider-'+this.props.slider_id}>\r\n      </div>    \r\n\r\n    </div>\r\n    );\r\n  }\r\n}","import React from 'react'\nimport styles from './styles.module.css'\nimport {Slider} from './components/slider'\nimport './components/slider.css'\n\nexport const ExampleComponent = ({ text }) => {\n  return <div className={styles.test}>{text}</div>\n}\nexport {Slider}","import React from 'react'\n\nimport { ExampleComponent, Slider } from 'scalable-slider-react'\nimport 'scalable-slider-react/dist/index.css'\nconst items2=[\n\t\t  {\n\t\t    src:\"https://www1.bac-assets.com/homepage/spa-assets/images/assets-images-site-homepage-icons-contact_icon_locations_red-CSX54c6594a.svg\",\n\t\t    locations:[55,67,98,5]\n\t\t  },\n\t\t  {\n\t\t    src:\"https://upload.wikimedia.org/wikipedia/commons/b/b1/Yellow_card.svg\",\n\t\t    locations:[2,5,14,24]\n\t\t  }\n]\n\nclass App extends React.Component{\n  \tconstructor() {\n\t    super();\n\t    this.state = {\n\t\t\tslider:{\n\t\t\t  \tvalue:5, \n\t\t\t  \toptions:{\n\t\t\t        ceil:100,\n\t\t\t        floor:0,\n\t\t\t  \t}\n\t\t\t},\n\t\t\titems:[\n\t\t\t\t{\n\t\t\t\t\tsrc:\"https://www1.bac-assets.com/homepage/spa-assets/images/assets-images-site-homepage-icons-contact_icon_locations_red-CSX54c6594a.svg\",\n\t\t\t\t\tlocations:[22,29,36,25]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tsrc:\"https://upload.wikimedia.org/wikipedia/commons/b/b1/Yellow_card.svg\",\n\t\t\t\t\tlocations:[2,5,14,24]\n\t\t\t\t}\n\t\t\t]\n\t    };\n\t    this.handleClick=this.handleClick.bind(this);\n\t    this.handleChange=this.handleChange.bind(this);\n\t}\n\thandleClick(){\n\t\tvar state={...this.state}\n\t\tstate.slider.value++\n\t\tthis.setState({state})\n\t}\n\thandleChange(value){\n\n\t\tthis.setState({slider:{...this.state.slider, value:value}})\n\t}\n\trender(){\n\t\treturn (\n\t\t<>\n\t\t\t<ExampleComponent text=\"SLIDER IT IS 😄\" />\n\t\t\t<p>Double click on slider when you want to scale to default</p>\n\t\t\t<p>slider value:{this.state.slider.value}</p>\n\n\t\t\t<Slider slider_id={1} config={{height:90}} fluid items={this.state.items} d3slider={this.state.slider} handleChange={this.handleChange} />\n\t\t\t<button onClick={this.handleClick}>increment</button>\n\n\t\t\t<Slider slider_id={2} config={{height:90, tickCount:100}} fluid items={this.state.items} d3slider={this.state.slider} handleChange={this.handleChange} />\n\t\t\t<button onClick={this.handleClick}>increment</button>\n\n\t\t\t\n\t\t\t<p>This is a fixed size slider unlike above ones it does not change its width when window resizes</p>\n\t\t\t<Slider slider_id={3} config={{width:500,height:90, tickCount:100}} items={this.state.items} d3slider={this.state.slider} handleChange={this.handleChange} />\n\t\t\t<button onClick={this.handleClick}>increment</button>\n\n\t\t</>\t\n\t\t)\n\t}\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}